# ==========================
# ===  General settings  ===
# ==========================
set -g default-terminal "screen-256color"
set -ag terminal-overrides ",xterm-256color:RGB"
set -g history-limit 20000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
set -g repeat-time 300
setw -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize on

# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-a

# Set parent terminal title to reflect current window in tmux session 
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse support
set -g mouse on

# ==========================
# ===   Key bindings     ===
# ==========================
# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind [    # paste-buffer
unbind ]
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer 
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left

# Reload tmux configuration 
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind - split-window -h -c "#{pane_current_path}"
bind = split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -r C-[ previous-window
bind -r C-] next-window
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
bind -r Tab last-window   # cycle thru MRU tabs
bind -r C-o swap-pane -D

# Zoom pane
#bind + resize-pane -Z

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
# bind \ if '[ #{pane_index} -eq 1 ]' \
#      'swap-pane -s "!"' \
#      'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
set -g visual-activity on

# TODO: Does not work as well, check on newer versions
# set -g visual-silence on

# BUG: bell-action other ignored · Issue #1027 · tmux/tmux · GitHub - https://github.com/tmux/tmux/issues/1027
# set -g visual-bell on
# setw -g bell-action other

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
# set -g @copy_use_osc52_fallback on
#
# # Prefer vi style key table
# setw -g mode-keys vi
#
# bind p paste-buffer
# bind C-p choose-buffer
#
# # trigger copy mode by
# bind -n M-Up copy-mode
#
# # Scroll up/down by 1 line, half screen, whole screen
# bind -T copy-mode-vi M-Up              send-keys -X scroll-up
# bind -T copy-mode-vi M-Down            send-keys -X scroll-down
# bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
# bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
# bind -T copy-mode-vi PageDown          send-keys -X page-down
# bind -T copy-mode-vi PageUp            send-keys -X page-up
#
# # When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
# bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
# bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down
#
# # wrap default shell in reattach-to-user-namespace if available
# # there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# # don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
# if-shell "command -v reattach-to-user-namespace > /dev/null 2>&1" \
#     "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"
#
# yank="~/.tmux/yank.sh"
#
# # Copy selected text
# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
# bind -T copy-mode-vi Y send-keys -X copy-line \;\
#     run "tmux save-buffer - | $yank"
# bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
#     run "tmux save-buffer - | $yank"
# bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
# bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
#     run "tmux save-buffer - | $yank"
#
# # Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# # clear select on subsequence mouse click
# bind -T copy-mode-vi MouseDragEnd1Pane \
#     send-keys -X copy-pipe "$yank"
# bind -T copy-mode-vi MouseDown1Pane select-pane \;\
#    send-keys -X clear-selection
    
# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# =====================================
# ===    Appearence and status bar  ===
# ======================================

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""

setw -g window-status-format " #I:#W "

# general status bar settings
set -g status on
set -g status-interval 5
set -g status-position top
set -g status-justify left
set -g status-right-length 100


# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"

# ==========================
# ===   Remote config    ===
# ==========================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
     'source-file ~/.tmux/tmux.remote.conf'

# ============================
# ===       Plugins        ===
# ============================
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-online-status'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'samoshkin/tmux-plugin-sysstat'
set -g @plugin 'catppuccin/tmux'

# Sidebar-tree properties
set -g @sidebar-tree 't'
set -g @sidebar-tree-focus 'T'
set -g @sidebar-tree-command 'tree -C'

# Theme settings
set -g @catppuccin_flavor 'mocha' # latte, frappe, macchiato or mocha
set -g @catppuccin_window_status_style "rounded"

run ~/.tmux/plugins/tmux/catppuccin.tmux

# Make the status line pretty and add some modules
set -g status-right-length 100
set -g status-left-length 100
set -g status-left ""
set -g status-right "#{E:@catppuccin_status_application}"
set -agF status-right "#{E:@catppuccin_status_cpu}"
set -ag status-right "#{E:@catppuccin_status_session}"
set -ag status-right "#{E:@catppuccin_status_uptime}"
set -agF status-right "#{E:@catppuccin_status_battery}"


# Run all plugins' scripts
run '~/.tmux/plugins/tpm/tpm'
